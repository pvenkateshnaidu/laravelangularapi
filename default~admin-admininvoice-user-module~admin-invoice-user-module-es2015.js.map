{"version":3,"sources":["webpack:///./node_modules/@ng-plus/signature-pad/fesm2015/ng-plus-signature-pad.js","webpack:///./node_modules/@ng-plus/signature-pad/node_modules/signature_pad/dist/signature_pad.js","webpack:///./node_modules/primeng/inplace.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwG;AACvC;AAClB;;AAE/C;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA,gCAAgC,0DAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,0DAAY;AACpC,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gCAAgC,6DAAY;AAC5C;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,yBAAyB,EAAE,qBAAqB,EAAE;AAClD;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,wCAAwC,EAAE;AAC1C,yCAAyC,EAAE;AAC3C;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iGAAiG,kBAAkB;AACnH,0FAA0F,mBAAmB;AAC7G;AACA;AACA;AACA,gDAAgD,mBAAmB,oBAAoB,mBAAmB;AAC1G,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA,mBAAmB,OAAO,uDAAS,oBAAoB,OAAO,wDAAU,EAAE,IAAI;AAC9E,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,sBAAsB,OAAO,oDAAM,EAAE;AACrC,kBAAkB,OAAO,mDAAK,EAAE;AAChC,uBAAuB,OAAO,mDAAK,EAAE;AACrC,kBAAkB,OAAO,mDAAK,EAAE;AAChC,yBAAyB,OAAO,mDAAK,EAAE;AACvC,wBAAwB,OAAO,mDAAK,EAAE;AACtC,wBAAwB,OAAO,mDAAK,EAAE;AACtC,yBAAyB,OAAO,mDAAK,EAAE;AACvC,yBAAyB,OAAO,mDAAK,EAAE;AACvC,yBAAyB,OAAO,mDAAK,EAAE;AACvC,0BAA0B,OAAO,mDAAK,EAAE;AACxC,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,eAAe,OAAO,mDAAK,EAAE;AAC7B,cAAc,OAAO,oDAAM,EAAE;AAC7B,iBAAiB,OAAO,oDAAM,EAAE;AAChC,oBAAoB,OAAO,mDAAK,EAAE;AAClC;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB,0BAA0B,4DAAY;AACtC;AACA;AACA,aAAa,IAAI;AACjB;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;;AAEqD;AACrD;;;;;;;;;;;;;AClOA;AACA;AACA;AACA;;AAEa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,0BAA0B,YAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,oBAAoB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,6BAA6B;AAClE,SAAS;AACT;AACA,mCAAmC,6BAA6B;AAChE,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,6BAA6B;AAC5D;AACA;AACA,iCAAiC,6BAA6B;AAC9D;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,eAAe;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,2BAA2B;AAChF;AACA;AACA;AACA,+BAA+B,mBAAmB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,6BAA6B;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;;;;;;;;;;;;ACpfA;AACa;AACb;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,SAAS,mBAAO,CAAC,0FAA8B,G","file":"default~admin-admininvoice-user-module~admin-invoice-user-module-es2015.js","sourcesContent":["import { Component, ElementRef, EventEmitter, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport * as SignaturePad from 'signature_pad/dist/signature_pad';\nimport { CommonModule } from '@angular/common';\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\nclass SignaturePadComponent {\r\n    constructor() {\r\n        this.points = [];\r\n        this.pointsChange = new EventEmitter();\r\n        this.editable = true;\r\n        this.emitOnDragEnd = false;\r\n        this.penColor = 'black';\r\n        this.backgroundColor = 'transparent';\r\n        this.showDoneButton = true;\r\n        this.doneButtonText = 'Done';\r\n        this.doneButtonClass = 'btn btn-primary';\r\n        this.showClearButton = true;\r\n        this.clearButtonText = 'Clear';\r\n        this.clearButtonClass = 'btn btn-default';\r\n        this.format = 'blob';\r\n        this.height = 150;\r\n        this.width = 600;\r\n        this.done = new EventEmitter();\r\n        this.cleared = new EventEmitter();\r\n        this.responsive = true;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() {\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterViewInit() {\r\n        // Resize Canvas to full screen:\r\n        if (this.responsive) {\r\n            window.addEventListener('resize', () => {\r\n                this.resizeCanvas();\r\n            });\r\n            this.resizeCanvas();\r\n        }\r\n        this.initPad();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    initPad() {\r\n        this.signaturePad = new SignaturePad(this.canvasRef.nativeElement, {\r\n            penColor: this.penColor,\r\n            backgroundColor: this.backgroundColor\r\n        });\r\n        this.signaturePad.penColor = this.penColor;\r\n        if (this.editable) {\r\n            this.signaturePad.on();\r\n        }\r\n        else {\r\n            this.signaturePad.off();\r\n        }\r\n        this.signaturePad.onEnd = () => {\r\n            this.emitPoints();\r\n            if (this.emitOnDragEnd) {\r\n                this.emitBlob();\r\n            }\r\n        };\r\n        this.applyPoints();\r\n        if (this.emitOnDragEnd) {\r\n            this.emitBlob();\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    clearPad() {\r\n        this.signaturePad.clear();\r\n        this.cleared.emit();\r\n        this.emitPoints();\r\n        if (this.emitOnDragEnd) {\r\n            this.emitBlob();\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    applyPoints() {\r\n        if (!this.points || !this.signaturePad) {\r\n            return;\r\n        }\r\n        this.signaturePad.clear();\r\n        const /** @type {?} */ multiplier = this.canvasRef.nativeElement.offsetWidth / this.width;\r\n        const /** @type {?} */ points = JSON.parse(JSON.stringify(this.points));\r\n        points.forEach(group => {\r\n            group.points.forEach(pt => {\r\n                pt.x = pt.x * multiplier;\r\n                pt.y = pt.y * multiplier;\r\n            });\r\n        });\r\n        this.signaturePad.fromData(points);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    emitPoints() {\r\n        const /** @type {?} */ multiplier = this.canvasRef.nativeElement.offsetWidth / this.width;\r\n        const /** @type {?} */ points = JSON.parse(JSON.stringify(this.signaturePad.toData()));\r\n        points.forEach(group => {\r\n            group.points.forEach(pt => {\r\n                pt.x = pt.x / multiplier;\r\n                pt.y = pt.y / multiplier;\r\n            });\r\n        });\r\n        this.pointsChange.emit(points);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    emitPointsAndBlob() {\r\n        this.emitPoints();\r\n        this.emitBlob();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    emitBlob() {\r\n        switch (this.format) {\r\n            case 'base64':\r\n                this.done.emit(this.signaturePad.toDataURL());\r\n                break;\r\n            case 'json':\r\n                this.done.emit(this.signaturePad.toData());\r\n                break;\r\n            default:\r\n                this.canvasRef.nativeElement.toBlob((blob) => {\r\n                    this.done.emit(blob);\r\n                });\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    resizeCanvas() {\r\n        const /** @type {?} */ canvas = this.canvasRef.nativeElement;\r\n        if (!canvas) {\r\n            return;\r\n        }\r\n        const /** @type {?} */ pad = /** @type {?} */ (canvas.closest('.signature-pad'));\r\n        if (!pad) {\r\n            return;\r\n        }\r\n        const /** @type {?} */ w = pad.offsetWidth;\r\n        const /** @type {?} */ h = pad.offsetWidth / (this.width / this.height);\r\n        canvas.setAttribute('width', `${w}`);\r\n        canvas.setAttribute('height', `${h}`);\r\n        this.applyPoints();\r\n    }\r\n}\r\nSignaturePadComponent.decorators = [\r\n    { type: Component, args: [{\r\n                selector: 'ng-signature-pad',\r\n                template: `<div class=\"signature-pad\">\r\n    <canvas\r\n        [width]=\"width\"\r\n        [height]=\"height\"\r\n        #canvas></canvas>\r\n    <div class=\"buttons\">\r\n        <button [class]=\"doneButtonClass\" *ngIf=\"showDoneButton\" (click)=\"emitPointsAndBlob()\">{{ doneButtonText }}</button>\r\n        <button [class]=\"clearButtonClass\" *ngIf=\"showClearButton\" (click)=\"clearPad()\">{{ clearButtonText }}</button>\r\n    </div>\r\n</div>\r\n`,\r\n                styles: [`.signature-pad canvas{background:#f2f2f2}.signature-pad .btn{margin-right:.25em}`]\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nSignaturePadComponent.ctorParameters = () => [];\r\nSignaturePadComponent.propDecorators = {\r\n    \"canvasRef\": [{ type: ViewChild, args: ['canvas', { read: ElementRef },] },],\r\n    \"points\": [{ type: Input },],\r\n    \"pointsChange\": [{ type: Output },],\r\n    \"editable\": [{ type: Input },],\r\n    \"emitOnDragEnd\": [{ type: Input },],\r\n    \"penColor\": [{ type: Input },],\r\n    \"backgroundColor\": [{ type: Input },],\r\n    \"showDoneButton\": [{ type: Input },],\r\n    \"doneButtonText\": [{ type: Input },],\r\n    \"doneButtonClass\": [{ type: Input },],\r\n    \"showClearButton\": [{ type: Input },],\r\n    \"clearButtonText\": [{ type: Input },],\r\n    \"clearButtonClass\": [{ type: Input },],\r\n    \"format\": [{ type: Input },],\r\n    \"height\": [{ type: Input },],\r\n    \"width\": [{ type: Input },],\r\n    \"done\": [{ type: Output },],\r\n    \"cleared\": [{ type: Output },],\r\n    \"responsive\": [{ type: Input },],\r\n};\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\nclass SignaturePadModule {\r\n}\r\nSignaturePadModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                imports: [CommonModule],\r\n                declarations: [SignaturePadComponent],\r\n                exports: [SignaturePadComponent]\r\n            },] },\r\n];\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\n\nexport { SignaturePadComponent, SignaturePadModule };\n//# sourceMappingURL=ng-plus-signature-pad.js.map\n","/*!\n * Signature Pad v3.0.0-beta.2 | https://github.com/szimek/signature_pad\n * (c) 2018 Szymon Nowak | Released under the MIT license\n */\n\n'use strict';\n\nvar Point = (function () {\n    function Point(x, y, time) {\n        this.x = x;\n        this.y = y;\n        this.time = time || Date.now();\n    }\n    Point.prototype.distanceTo = function (start) {\n        return Math.sqrt(Math.pow(this.x - start.x, 2) + Math.pow(this.y - start.y, 2));\n    };\n    Point.prototype.equals = function (other) {\n        return this.x === other.x && this.y === other.y && this.time === other.time;\n    };\n    Point.prototype.velocityFrom = function (start) {\n        return (this.time !== start.time) ? this.distanceTo(start) / (this.time - start.time) : 0;\n    };\n    return Point;\n}());\n\nvar Bezier = (function () {\n    function Bezier(startPoint, control2, control1, endPoint, startWidth, endWidth) {\n        this.startPoint = startPoint;\n        this.control2 = control2;\n        this.control1 = control1;\n        this.endPoint = endPoint;\n        this.startWidth = startWidth;\n        this.endWidth = endWidth;\n    }\n    Bezier.fromPoints = function (points, widths) {\n        var c2 = this.calculateControlPoints(points[0], points[1], points[2]).c2;\n        var c3 = this.calculateControlPoints(points[1], points[2], points[3]).c1;\n        return new Bezier(points[1], c2, c3, points[2], widths.start, widths.end);\n    };\n    Bezier.calculateControlPoints = function (s1, s2, s3) {\n        var dx1 = s1.x - s2.x;\n        var dy1 = s1.y - s2.y;\n        var dx2 = s2.x - s3.x;\n        var dy2 = s2.y - s3.y;\n        var m1 = { x: (s1.x + s2.x) / 2.0, y: (s1.y + s2.y) / 2.0 };\n        var m2 = { x: (s2.x + s3.x) / 2.0, y: (s2.y + s3.y) / 2.0 };\n        var l1 = Math.sqrt((dx1 * dx1) + (dy1 * dy1));\n        var l2 = Math.sqrt((dx2 * dx2) + (dy2 * dy2));\n        var dxm = (m1.x - m2.x);\n        var dym = (m1.y - m2.y);\n        var k = l2 / (l1 + l2);\n        var cm = { x: m2.x + (dxm * k), y: m2.y + (dym * k) };\n        var tx = s2.x - cm.x;\n        var ty = s2.y - cm.y;\n        return {\n            c1: new Point(m1.x + tx, m1.y + ty),\n            c2: new Point(m2.x + tx, m2.y + ty)\n        };\n    };\n    Bezier.prototype.length = function () {\n        var steps = 10;\n        var length = 0;\n        var px;\n        var py;\n        for (var i = 0; i <= steps; i += 1) {\n            var t = i / steps;\n            var cx = this.point(t, this.startPoint.x, this.control1.x, this.control2.x, this.endPoint.x);\n            var cy = this.point(t, this.startPoint.y, this.control1.y, this.control2.y, this.endPoint.y);\n            if (i > 0) {\n                var xdiff = cx - px;\n                var ydiff = cy - py;\n                length += Math.sqrt((xdiff * xdiff) + (ydiff * ydiff));\n            }\n            px = cx;\n            py = cy;\n        }\n        return length;\n    };\n    Bezier.prototype.point = function (t, start, c1, c2, end) {\n        return (start * (1.0 - t) * (1.0 - t) * (1.0 - t))\n            + (3.0 * c1 * (1.0 - t) * (1.0 - t) * t)\n            + (3.0 * c2 * (1.0 - t) * t * t)\n            + (end * t * t * t);\n    };\n    return Bezier;\n}());\n\nfunction throttle(fn, wait) {\n    if (wait === void 0) { wait = 250; }\n    var previous = 0;\n    var timeout = null;\n    var result;\n    var storedContext;\n    var storedArgs;\n    var later = function () {\n        previous = Date.now();\n        timeout = null;\n        result = fn.apply(storedContext, storedArgs);\n        if (!timeout) {\n            storedContext = null;\n            storedArgs = [];\n        }\n    };\n    return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var now = Date.now();\n        var remaining = wait - (now - previous);\n        storedContext = this;\n        storedArgs = args;\n        if (remaining <= 0 || remaining > wait) {\n            if (timeout) {\n                clearTimeout(timeout);\n                timeout = null;\n            }\n            previous = now;\n            result = fn.apply(storedContext, storedArgs);\n            if (!timeout) {\n                storedContext = null;\n                storedArgs = [];\n            }\n        }\n        else if (!timeout) {\n            timeout = setTimeout(later, remaining);\n        }\n        return result;\n    };\n}\n\nvar SignaturePad = (function () {\n    function SignaturePad(canvas, options) {\n        if (options === void 0) { options = {}; }\n        var _this = this;\n        this.canvas = canvas;\n        this.options = options;\n        this._handleMouseDown = function (event) {\n            if (event.which === 1) {\n                _this._mouseButtonDown = true;\n                _this._strokeBegin(event);\n            }\n        };\n        this._handleMouseMove = function (event) {\n            if (_this._mouseButtonDown) {\n                _this._strokeMoveUpdate(event);\n            }\n        };\n        this._handleMouseUp = function (event) {\n            if (event.which === 1 && _this._mouseButtonDown) {\n                _this._mouseButtonDown = false;\n                _this._strokeEnd(event);\n            }\n        };\n        this._handleTouchStart = function (event) {\n            event.preventDefault();\n            if (event.targetTouches.length === 1) {\n                var touch = event.changedTouches[0];\n                _this._strokeBegin(touch);\n            }\n        };\n        this._handleTouchMove = function (event) {\n            event.preventDefault();\n            var touch = event.targetTouches[0];\n            _this._strokeMoveUpdate(touch);\n        };\n        this._handleTouchEnd = function (event) {\n            var wasCanvasTouched = event.target === _this.canvas;\n            if (wasCanvasTouched) {\n                event.preventDefault();\n                var touch = event.changedTouches[0];\n                _this._strokeEnd(touch);\n            }\n        };\n        this.velocityFilterWeight = options.velocityFilterWeight || 0.7;\n        this.minWidth = options.minWidth || 0.5;\n        this.maxWidth = options.maxWidth || 2.5;\n        this.throttle = (\"throttle\" in options ? options.throttle : 16);\n        this.minDistance = (\"minDistance\" in options ? options.minDistance : 5);\n        if (this.throttle) {\n            this._strokeMoveUpdate = throttle(SignaturePad.prototype._strokeUpdate, this.throttle);\n        }\n        else {\n            this._strokeMoveUpdate = SignaturePad.prototype._strokeUpdate;\n        }\n        this.dotSize = options.dotSize || function () {\n            return (this.minWidth + this.maxWidth) / 2;\n        };\n        this.penColor = options.penColor || \"black\";\n        this.backgroundColor = options.backgroundColor || \"rgba(0,0,0,0)\";\n        this.onBegin = options.onBegin;\n        this.onEnd = options.onEnd;\n        this._ctx = canvas.getContext(\"2d\");\n        this.clear();\n        this.on();\n    }\n    SignaturePad.prototype.clear = function () {\n        var ctx = this._ctx;\n        var canvas = this.canvas;\n        ctx.fillStyle = this.backgroundColor;\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        this._data = [];\n        this._reset();\n        this._isEmpty = true;\n    };\n    SignaturePad.prototype.fromDataURL = function (dataUrl, options, callback) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        var image = new Image();\n        var ratio = options.ratio || window.devicePixelRatio || 1;\n        var width = options.width || (this.canvas.width / ratio);\n        var height = options.height || (this.canvas.height / ratio);\n        this._reset();\n        image.onload = function () {\n            _this._ctx.drawImage(image, 0, 0, width, height);\n            if (callback) {\n                callback();\n            }\n        };\n        image.onerror = function (error) {\n            if (callback) {\n                callback(error);\n            }\n        };\n        image.src = dataUrl;\n        this._isEmpty = false;\n    };\n    SignaturePad.prototype.toDataURL = function (type, encoderOptions) {\n        if (type === void 0) { type = \"image/png\"; }\n        switch (type) {\n            case \"image/svg+xml\":\n                return this._toSVG();\n            default:\n                return this.canvas.toDataURL(type, encoderOptions);\n        }\n    };\n    SignaturePad.prototype.on = function () {\n        this._handleMouseEvents();\n        if (\"ontouchstart\" in window) {\n            this._handleTouchEvents();\n        }\n    };\n    SignaturePad.prototype.off = function () {\n        this.canvas.style.msTouchAction = \"auto\";\n        this.canvas.style.touchAction = \"auto\";\n        this.canvas.removeEventListener(\"mousedown\", this._handleMouseDown);\n        this.canvas.removeEventListener(\"mousemove\", this._handleMouseMove);\n        document.removeEventListener(\"mouseup\", this._handleMouseUp);\n        this.canvas.removeEventListener(\"touchstart\", this._handleTouchStart);\n        this.canvas.removeEventListener(\"touchmove\", this._handleTouchMove);\n        this.canvas.removeEventListener(\"touchend\", this._handleTouchEnd);\n    };\n    SignaturePad.prototype.isEmpty = function () {\n        return this._isEmpty;\n    };\n    SignaturePad.prototype.fromData = function (pointGroups) {\n        var _this = this;\n        this.clear();\n        this._fromData(pointGroups, function (_a) {\n            var color = _a.color, curve = _a.curve;\n            return _this._drawCurve({ color: color, curve: curve });\n        }, function (_a) {\n            var color = _a.color, point = _a.point;\n            return _this._drawDot({ color: color, point: point });\n        });\n        this._data = pointGroups;\n    };\n    SignaturePad.prototype.toData = function () {\n        return this._data;\n    };\n    SignaturePad.prototype._strokeBegin = function (event) {\n        var newPointGroup = {\n            color: this.penColor,\n            points: []\n        };\n        this._data.push(newPointGroup);\n        this._reset();\n        this._strokeUpdate(event);\n        if (typeof this.onBegin === \"function\") {\n            this.onBegin(event);\n        }\n    };\n    SignaturePad.prototype._strokeUpdate = function (event) {\n        var x = event.clientX;\n        var y = event.clientY;\n        var point = this._createPoint(x, y);\n        var lastPointGroup = this._data[this._data.length - 1];\n        var lastPoints = lastPointGroup.points;\n        var lastPoint = lastPoints.length > 0 && lastPoints[lastPoints.length - 1];\n        var isLastPointTooClose = lastPoint ? point.distanceTo(lastPoint) <= this.minDistance : false;\n        var color = lastPointGroup.color;\n        if (!lastPoint || !(lastPoint && isLastPointTooClose)) {\n            var curve = this._addPoint(point);\n            if (!lastPoint) {\n                this._drawDot({ color: color, point: point });\n            }\n            else if (curve) {\n                this._drawCurve({ color: color, curve: curve });\n            }\n            lastPoints.push({\n                time: point.time,\n                x: point.x,\n                y: point.y\n            });\n        }\n    };\n    SignaturePad.prototype._strokeEnd = function (event) {\n        this._strokeUpdate(event);\n        if (typeof this.onEnd === \"function\") {\n            this.onEnd(event);\n        }\n    };\n    SignaturePad.prototype._handleMouseEvents = function () {\n        this._mouseButtonDown = false;\n        this.canvas.addEventListener(\"mousedown\", this._handleMouseDown);\n        this.canvas.addEventListener(\"mousemove\", this._handleMouseMove);\n        document.addEventListener(\"mouseup\", this._handleMouseUp);\n    };\n    SignaturePad.prototype._handleTouchEvents = function () {\n        this.canvas.style.msTouchAction = \"none\";\n        this.canvas.style.touchAction = \"none\";\n        this.canvas.addEventListener(\"touchstart\", this._handleTouchStart);\n        this.canvas.addEventListener(\"touchmove\", this._handleTouchMove);\n        this.canvas.addEventListener(\"touchend\", this._handleTouchEnd);\n    };\n    SignaturePad.prototype._reset = function () {\n        this._points = [];\n        this._lastVelocity = 0;\n        this._lastWidth = (this.minWidth + this.maxWidth) / 2;\n        this._ctx.fillStyle = this.penColor;\n    };\n    SignaturePad.prototype._createPoint = function (x, y) {\n        var rect = this.canvas.getBoundingClientRect();\n        return new Point(x - rect.left, y - rect.top, new Date().getTime());\n    };\n    SignaturePad.prototype._addPoint = function (point) {\n        var _points = this._points;\n        _points.push(point);\n        if (_points.length > 2) {\n            if (_points.length === 3) {\n                _points.unshift(_points[0]);\n            }\n            var widths = this._calculateCurveWidths(_points[1], _points[2]);\n            var curve = Bezier.fromPoints(_points, widths);\n            _points.shift();\n            return curve;\n        }\n        return null;\n    };\n    SignaturePad.prototype._calculateCurveWidths = function (startPoint, endPoint) {\n        var velocity = (this.velocityFilterWeight * endPoint.velocityFrom(startPoint))\n            + ((1 - this.velocityFilterWeight) * this._lastVelocity);\n        var newWidth = this._strokeWidth(velocity);\n        var widths = {\n            end: newWidth,\n            start: this._lastWidth\n        };\n        this._lastVelocity = velocity;\n        this._lastWidth = newWidth;\n        return widths;\n    };\n    SignaturePad.prototype._strokeWidth = function (velocity) {\n        return Math.max(this.maxWidth / (velocity + 1), this.minWidth);\n    };\n    SignaturePad.prototype._drawCurveSegment = function (x, y, width) {\n        var ctx = this._ctx;\n        ctx.moveTo(x, y);\n        ctx.arc(x, y, width, 0, 2 * Math.PI, false);\n        this._isEmpty = false;\n    };\n    SignaturePad.prototype._drawCurve = function (_a) {\n        var color = _a.color, curve = _a.curve;\n        var ctx = this._ctx;\n        var widthDelta = curve.endWidth - curve.startWidth;\n        var drawSteps = Math.floor(curve.length()) * 2;\n        ctx.beginPath();\n        ctx.fillStyle = color;\n        for (var i = 0; i < drawSteps; i += 1) {\n            var t = i / drawSteps;\n            var tt = t * t;\n            var ttt = tt * t;\n            var u = 1 - t;\n            var uu = u * u;\n            var uuu = uu * u;\n            var x = uuu * curve.startPoint.x;\n            x += 3 * uu * t * curve.control1.x;\n            x += 3 * u * tt * curve.control2.x;\n            x += ttt * curve.endPoint.x;\n            var y = uuu * curve.startPoint.y;\n            y += 3 * uu * t * curve.control1.y;\n            y += 3 * u * tt * curve.control2.y;\n            y += ttt * curve.endPoint.y;\n            var width = curve.startWidth + (ttt * widthDelta);\n            this._drawCurveSegment(x, y, width);\n        }\n        ctx.closePath();\n        ctx.fill();\n    };\n    SignaturePad.prototype._drawDot = function (_a) {\n        var color = _a.color, point = _a.point;\n        var ctx = this._ctx;\n        var width = typeof this.dotSize === \"function\" ? this.dotSize() : this.dotSize;\n        ctx.beginPath();\n        this._drawCurveSegment(point.x, point.y, width);\n        ctx.closePath();\n        ctx.fillStyle = color;\n        ctx.fill();\n    };\n    SignaturePad.prototype._fromData = function (pointGroups, drawCurve, drawDot) {\n        for (var _i = 0, pointGroups_1 = pointGroups; _i < pointGroups_1.length; _i++) {\n            var group = pointGroups_1[_i];\n            var color = group.color, points = group.points;\n            if (points.length > 1) {\n                for (var j = 0; j < points.length; j += 1) {\n                    var basicPoint = points[j];\n                    var point = new Point(basicPoint.x, basicPoint.y, basicPoint.time);\n                    this.penColor = color;\n                    if (j === 0) {\n                        this._reset();\n                    }\n                    var curve = this._addPoint(point);\n                    if (curve) {\n                        drawCurve({ color: color, curve: curve });\n                    }\n                }\n            }\n            else {\n                this._reset();\n                drawDot({\n                    color: color,\n                    point: points[0]\n                });\n            }\n        }\n    };\n    SignaturePad.prototype._toSVG = function () {\n        var _this = this;\n        var pointGroups = this._data;\n        var ratio = Math.max(window.devicePixelRatio || 1, 1);\n        var minX = 0;\n        var minY = 0;\n        var maxX = this.canvas.width / ratio;\n        var maxY = this.canvas.height / ratio;\n        var svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n        svg.setAttribute(\"width\", this.canvas.width.toString());\n        svg.setAttribute(\"height\", this.canvas.height.toString());\n        this._fromData(pointGroups, function (_a) {\n            var color = _a.color, curve = _a.curve;\n            var path = document.createElement(\"path\");\n            if (!isNaN(curve.control1.x) &&\n                !isNaN(curve.control1.y) &&\n                !isNaN(curve.control2.x) &&\n                !isNaN(curve.control2.y)) {\n                var attr = \"M \" + curve.startPoint.x.toFixed(3) + \",\" + curve.startPoint.y.toFixed(3) + \" \"\n                    + (\"C \" + curve.control1.x.toFixed(3) + \",\" + curve.control1.y.toFixed(3) + \" \")\n                    + (curve.control2.x.toFixed(3) + \",\" + curve.control2.y.toFixed(3) + \" \")\n                    + (curve.endPoint.x.toFixed(3) + \",\" + curve.endPoint.y.toFixed(3));\n                path.setAttribute(\"d\", attr);\n                path.setAttribute(\"stroke-width\", (curve.endWidth * 2.25).toFixed(3));\n                path.setAttribute(\"stroke\", color);\n                path.setAttribute(\"fill\", \"none\");\n                path.setAttribute(\"stroke-linecap\", \"round\");\n                svg.appendChild(path);\n            }\n        }, function (_a) {\n            var color = _a.color, point = _a.point;\n            var circle = document.createElement(\"circle\");\n            var dotSize = typeof _this.dotSize === \"function\" ? _this.dotSize() : _this.dotSize;\n            circle.setAttribute(\"r\", dotSize.toString());\n            circle.setAttribute(\"cx\", point.x.toString());\n            circle.setAttribute(\"cy\", point.y.toString());\n            circle.setAttribute(\"fill\", color);\n            svg.appendChild(circle);\n        });\n        var prefix = \"data:image/svg+xml;base64,\";\n        var header = \"<svg\"\n            + \" xmlns=\\\"http://www.w3.org/2000/svg\\\"\"\n            + \" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"\"\n            + (\" viewBox=\\\"\" + minX + \" \" + minY + \" \" + maxX + \" \" + maxY + \"\\\"\")\n            + (\" width=\\\"\" + maxX + \"\\\"\")\n            + (\" height=\\\"\" + maxY + \"\\\"\")\n            + \">\";\n        var body = svg.innerHTML;\n        if (body === undefined) {\n            var dummy = document.createElement(\"dummy\");\n            var nodes = svg.childNodes;\n            dummy.innerHTML = \"\";\n            for (var i = 0; i < nodes.length; i += 1) {\n                dummy.appendChild(nodes[i].cloneNode(true));\n            }\n            body = dummy.innerHTML;\n        }\n        var footer = \"</svg>\";\n        var data = header + body + footer;\n        return prefix + btoa(data);\n    };\n    return SignaturePad;\n}());\n\nmodule.exports = SignaturePad;\n","/* Shorthand */\n\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./components/inplace/inplace\"));"],"sourceRoot":""}